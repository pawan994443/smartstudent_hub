import React, { useEffect, useState } from "react";
import { auth, db } from "./firebase"; 
import { collection, getDocs } from "firebase/firestore";
import jsPDF from "jspdf";

export default function AutoGeneratedPortfolio() {
  const [records, setRecords] = useState([]);
  const [loading, setLoading] = useState(true);

  
  const fetchRecords = async () => {
    if (!auth.currentUser) return;

    try {
      const userId = auth.currentUser.uid;
      const recordsRef = collection(db, "students", userId, "records");
      const snapshot = await getDocs(recordsRef);
      const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setRecords(data);
      setLoading(false);
    } catch (err) {
      console.error("Error fetching records:", err);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchRecords();
  }, [auth.currentUser]);

  
  const generatePDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(16);
    doc.text("Student Portfolio", 20, 20);
    doc.setFontSize(12);
    let y = 30;

    records.forEach((rec, i) => {
      doc.text(`${i + 1}. ${rec.type}`, 20, y);
      y += 6;
      doc.text(`Date: ${rec.date}`, 25, y);
      y += 6;
      doc.text(`Details: ${rec.details}`, 25, y);
      y += 6;
      if (rec.fileURL) {
        doc.text(`File: ${rec.fileURL}`, 25, y);
        y += 6;
      }
      y += 4;
      if (y > 270) {
        doc.addPage();
        y = 20;
      }
    });

    doc.save("Student_Portfolio.pdf");
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white rounded shadow mt-10">
      <h2 className="text-2xl font-bold mb-6 text-center">
        Auto-Generated Portfolio
      </h2>

      {loading ? (
        <p className="text-center text-gray-500">Loading records...</p>
      ) : records.length === 0 ? (
        <p className="text-center text-gray-500">
          No records available to generate portfolio.
        </p>
      ) : (
        <div className="flex flex-col items-center space-y-4">
          <button
            onClick={generatePDF}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          >
            Download PDF Portfolio
          </button>

          <div className="text-center">
            <p className="text-gray-600">
              Shareable link:{" "}
              <a
                href={`https://yourdomain.com/portfolio/${auth.currentUser?.uid}`}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-600 underline"
              >
                View Portfolio Online
              </a>
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
